"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/messages/page",{

/***/ "(app-pages-browser)/./src/hooks/useChat.ts":
/*!******************************!*\
  !*** ./src/hooks/useChat.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: function() { return /* binding */ useChat; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/api */ \"(app-pages-browser)/./src/utils/api.ts\");\n\n\n// セッション管理をローカルストレージに永続化\nconst STORAGE_KEY = \"chat_sessions\";\nconst useChat = ()=>{\n    const [sessions, setSessions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [currentSessionId, setCurrentSessionId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [sessionState, setSessionState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const currentSession = sessions.find((s)=>s.id === currentSessionId);\n    const messages = (currentSession === null || currentSession === void 0 ? void 0 : currentSession.messages) || [];\n    // ローカルストレージからセッションを読み込み\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        try {\n            const savedSessions = localStorage.getItem(STORAGE_KEY);\n            if (savedSessions) {\n                const parsed = JSON.parse(savedSessions);\n                // Date オブジェクトを復元\n                const sessionsWithDates = parsed.map((session)=>({\n                        ...session,\n                        createdAt: new Date(session.createdAt),\n                        updatedAt: new Date(session.updatedAt),\n                        messages: session.messages.map((msg)=>({\n                                ...msg,\n                                timestamp: new Date(msg.timestamp)\n                            }))\n                    }));\n                setSessions(sessionsWithDates);\n            }\n        } catch (error) {\n            console.error(\"Failed to load sessions from localStorage:\", error);\n        }\n    }, []);\n    // セッションをローカルストレージに保存\n    const saveSessions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newSessions)=>{\n        try {\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(newSessions));\n        } catch (error) {\n            console.error(\"Failed to save sessions to localStorage:\", error);\n        }\n    }, []);\n    const createNewSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((firstMessage)=>{\n        const sessionId = Date.now().toString();\n        const title = firstMessage.length > 30 ? firstMessage.substring(0, 30) + \"...\" : firstMessage;\n        const newSession = {\n            id: sessionId,\n            title,\n            messages: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        setSessions((prevSessions)=>{\n            const newSessions = [\n                newSession,\n                ...prevSessions\n            ];\n            saveSessions(newSessions);\n            return newSessions;\n        });\n        setCurrentSessionId(sessionId);\n        return sessionId;\n    }, [\n        saveSessions\n    ]);\n    const selectSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((sessionId)=>{\n        setCurrentSessionId(sessionId);\n        setError(null);\n    }, []);\n    const startNewChat = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setCurrentSessionId(null);\n        setError(null);\n    }, []);\n    const convertApiMessageToMessage = (apiMsg)=>({\n            id: apiMsg.id,\n            content: apiMsg.content,\n            role: apiMsg.type === \"ai\" ? \"assistant\" : \"user\",\n            timestamp: new Date(apiMsg.timestamp),\n            searchType: apiMsg.search_type === \"fact\" || apiMsg.search_type === \"network\" ? apiMsg.search_type : undefined\n        });\n    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (content, searchType, flowStep, projectId)=>{\n        let sessionId = currentSessionId;\n        // 新しいセッションを作成（初回メッセージの場合）\n        if (!sessionId) {\n            sessionId = createNewSession(content);\n        }\n        const userMessage = {\n            id: Date.now().toString(),\n            content,\n            role: \"user\",\n            timestamp: new Date(),\n            searchType: searchType === \"fact\" || searchType === \"network\" ? searchType : undefined\n        };\n        // ユーザーメッセージを追加（関数型更新を使用）\n        setSessions((prevSessions)=>{\n            const updatedSessions = prevSessions.map((session)=>session.id === sessionId ? {\n                    ...session,\n                    messages: [\n                        ...session.messages,\n                        userMessage\n                    ],\n                    updatedAt: new Date()\n                } : session);\n            saveSessions(updatedSessions);\n            return updatedSessions;\n        });\n        setIsLoading(true);\n        setError(null);\n        try {\n            // バックエンドにメッセージを送信\n            const requestData = {\n                content,\n                search_type: searchType !== null && searchType !== void 0 ? searchType : \"normal\",\n                flow_step: flowStep,\n                session_id: sessionId,\n                project_id: projectId\n            };\n            let response;\n            let assistantMessage;\n            // 検索タイプが指定されている場合はRAG/通常チャットAPIを優先\n            // （バックエンド側は search_type 優先で処理されるため flow_step 同送でも問題なし）\n            if (searchType === \"fact\" || searchType === \"network\") {\n                response = await _utils_api__WEBPACK_IMPORTED_MODULE_1__.api.sendMessage(requestData);\n                assistantMessage = convertApiMessageToMessage(response);\n            } else if (flowStep) {\n                // フローステップがある場合は柔軟なポリシーシステムを使用\n                const flexibleResponse = await _utils_api__WEBPACK_IMPORTED_MODULE_1__.api.sendFlexiblePolicyMessage(requestData);\n                // セッション状態を更新\n                if (flexibleResponse.full_state) {\n                    setSessionState({\n                        session_id: flexibleResponse.session_id,\n                        project_id: flexibleResponse.project_id,\n                        ...flexibleResponse.full_state\n                    });\n                }\n                assistantMessage = {\n                    id: flexibleResponse.id,\n                    content: flexibleResponse.content,\n                    role: \"assistant\",\n                    timestamp: new Date(flexibleResponse.timestamp),\n                    searchType: undefined\n                };\n            } else {\n                response = await _utils_api__WEBPACK_IMPORTED_MODULE_1__.api.sendMessage(requestData);\n                assistantMessage = convertApiMessageToMessage(response);\n            }\n            // AIレスポンスを追加（関数型更新を使用）\n            setSessions((prevSessions)=>{\n                const finalSessions = prevSessions.map((session)=>session.id === sessionId ? {\n                        ...session,\n                        messages: [\n                            ...session.messages,\n                            assistantMessage\n                        ],\n                        updatedAt: new Date()\n                    } : session);\n                saveSessions(finalSessions);\n                return finalSessions;\n            });\n        } catch (err) {\n            console.error(\"Failed to send message:\", err);\n            let errorMessage = \"メッセージの送信に失敗しました。\";\n            if (err instanceof _utils_api__WEBPACK_IMPORTED_MODULE_1__.ApiError) {\n                if (err.status === 500) {\n                    errorMessage = \"サーバーエラーが発生しました。しばらく待ってから再試行してください。\";\n                } else if (err.status === 0 || err.message.includes(\"Network error\")) {\n                    errorMessage = \"バックエンドサーバーに接続できません。サーバーが起動しているか確認してください。\";\n                }\n            } else if (err instanceof Error && err.message.includes(\"Network error\")) {\n                errorMessage = \"ネットワークエラーが発生しました。接続を確認してください。\";\n            }\n            setError(errorMessage);\n            // エラーメッセージを追加（関数型更新を使用）\n            const errorMessageObj = {\n                id: (Date.now() + 1).toString(),\n                content: \"❌ \".concat(errorMessage),\n                role: \"assistant\",\n                timestamp: new Date()\n            };\n            setSessions((prevSessions)=>{\n                const errorSessions = prevSessions.map((session)=>session.id === sessionId ? {\n                        ...session,\n                        messages: [\n                            ...session.messages,\n                            errorMessageObj\n                        ],\n                        updatedAt: new Date()\n                    } : session);\n                saveSessions(errorSessions);\n                return errorSessions;\n            });\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        currentSessionId,\n        createNewSession,\n        saveSessions\n    ]);\n    return {\n        sessions,\n        currentSessionId,\n        messages,\n        sendMessage,\n        selectSession,\n        startNewChat,\n        isLoading,\n        error,\n        sessionState\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useChat.ts\n"));

/***/ })

});