"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/messages/page",{

/***/ "(app-pages-browser)/./src/utils/api.ts":
/*!**************************!*\
  !*** ./src/utils/api.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: function() { return /* binding */ ApiError; },\n/* harmony export */   api: function() { return /* binding */ api; }\n/* harmony export */ });\n// 環境変数の読み込みを確実にする\nconst getApiBaseUrl = ()=>{\n    // まずビルド時の環境変数を試す\n    let endpoint = \"http://127.0.0.1:8000\";\n    // クライアントサイドでの動的判定\n    if (true) {\n        // 本番環境のURLパターンを検出（Vercel、Netlify、GitHub Pages等）\n        const isProd = window.location.hostname !== \"localhost\" && window.location.hostname !== \"127.0.0.1\" && !window.location.hostname.includes(\"localhost\");\n        if (isProd && !endpoint) {\n            // 本番環境なのに環境変数がない場合はエラーとする\n            console.error(\"Production environment detected but NEXT_PUBLIC_API_ENDPOINT not set. Please configure the environment variable.\");\n            throw new Error(\"API endpoint not configured for production environment. Please set NEXT_PUBLIC_API_ENDPOINT.\");\n        }\n        console.log(\"Client-side env check:\", {\n            hostname: window.location.hostname,\n            isProd,\n            envVariable: \"http://127.0.0.1:8000\",\n            resolvedEndpoint: endpoint\n        });\n    }\n    const defaultEndpoint = \"http://127.0.0.1:8000\";\n    const finalEndpoint = endpoint || defaultEndpoint;\n    console.log(\"Environment variable NEXT_PUBLIC_API_ENDPOINT:\", \"http://127.0.0.1:8000\");\n    console.log(\"Using API endpoint:\", finalEndpoint);\n    return finalEndpoint;\n};\nconst API_BASE_URL = getApiBaseUrl();\nclass ApiError extends Error {\n    constructor(status, message){\n        super(message);\n        this.status = status;\n        this.name = \"ApiError\";\n    }\n}\nasync function fetchApi(endpoint, options) {\n    const url = \"\".concat(API_BASE_URL).concat(endpoint);\n    console.log(\"API Request: \".concat((options === null || options === void 0 ? void 0 : options.method) || \"GET\", \" \").concat(url));\n    try {\n        const response = await fetch(url, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            },\n            mode: \"cors\",\n            credentials: \"omit\",\n            ...options\n        });\n        console.log(\"API Response: \".concat(response.status, \" \").concat(response.statusText));\n        if (!response.ok) {\n            const errorText = await response.text().catch(()=>\"Unable to read error response\");\n            console.error(\"API Error Response: \".concat(errorText));\n            throw new ApiError(response.status, \"HTTP error! status: \".concat(response.status, \", message: \").concat(errorText));\n        }\n        const data = await response.json();\n        console.log(\"API Success:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"API Fetch Error:\", error);\n        if (error instanceof ApiError) {\n            throw error;\n        }\n        if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n            throw new Error(\"Network error: Unable to connect to server. Please check your internet connection and try again.\");\n        }\n        throw new Error(\"Network error: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n    }\n}\nconst api = {\n    async sendMessage (request) {\n        return fetchApi(\"/api/chat\", {\n            method: \"POST\",\n            body: JSON.stringify(request)\n        });\n    },\n    async getSessions () {\n        return fetchApi(\"/api/sessions\");\n    },\n    async createSession () {\n        return fetchApi(\"/api/sessions\", {\n            method: \"POST\"\n        });\n    },\n    async sendFlexiblePolicyMessage (request) {\n        return fetchApi(\"/api/policy-flexible\", {\n            method: \"POST\",\n            body: JSON.stringify(request)\n        });\n    },\n    async getSessionState (sessionId) {\n        return fetchApi(\"/api/session-state/\".concat(sessionId));\n    },\n    async healthCheck () {\n        try {\n            const response = await fetchApi(\"/\");\n            return response;\n        } catch (error) {\n            console.error(\"Health check failed:\", error);\n            throw error;\n        }\n    },\n    async testConnection () {\n        try {\n            await this.healthCheck();\n            return true;\n        } catch (error) {\n            console.error(\"Connection test failed:\", error);\n            return false;\n        }\n    },\n    async saveProjectStepSections (request) {\n        return fetchApi(\"/api/project-step-sections\", {\n            method: \"POST\",\n            body: JSON.stringify(request)\n        });\n    },\n    async getProjectStepSections (projectId, stepKey) {\n        return fetchApi(\"/api/project-step-sections/\".concat(projectId, \"/\").concat(stepKey));\n    },\n    async searchCoworkers () {\n        let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", department = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n        const params = new URLSearchParams();\n        if (query) params.append(\"q\", query);\n        if (department) params.append(\"department\", department);\n        return fetchApi(\"/api/coworkers/search?\".concat(params.toString()));\n    },\n    async createProject (request) {\n        return fetchApi(\"/api/projects\", {\n            method: \"POST\",\n            body: JSON.stringify(request)\n        });\n    },\n    async getProject (projectId) {\n        return fetchApi(\"/api/projects/\".concat(projectId));\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/api.ts\n"));

/***/ })

});