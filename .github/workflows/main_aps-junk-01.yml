name: Build and deploy Node.js app to Azure Web App - aps-junk-01

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # ルートに Next アプリがあるなら "."、サブディレクトリなら "front2" 等に変更
  APP_DIR: "."

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: 🚨 EMERGENCY SIMPLE DEPLOY 🚨
        env:
          NEXT_PUBLIC_API_ENDPOINT: ${{ secrets.NEXT_PUBLIC_API_ENDPOINT }}
          NEXT_PUBLIC_ASSET_VERSION: ${{ github.sha }}
          NEXT_TELEMETRY_DISABLED: '1'
        run: |
          npm ci
          npm run build
          
          # 緊急デバッグ用ファイルをoutディレクトリにコピー
          cp public/emergency-test.html out/
          
          # 現在時刻とコミットハッシュを記録
          echo "EMERGENCY DEPLOY - $(date) - ${GITHUB_SHA}" > out/DEPLOY-STATUS.txt
          echo "${GITHUB_SHA}" > out/version.txt
          
          # 静的ファイル配信用のpackage.jsonを追加
          cat > out/package.json <<'EOF'
          {
            "name": "static-site",
            "private": true,
            "scripts": {
              "start": "node server.js"
            },
            "engines": {
              "node": ">=18"
            }
          }
          EOF
          
          # シンプルなNode.jsサーバーを作成
          cat > out/server.js <<'EOF'
          const express = require('express');
          const path = require('path');
          
          const app = express();
          const PORT = process.env.PORT || 3000;
          
          // 静的ファイルを配信
          app.use(express.static('.'));
          
          // SPAのフォールバック
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'index.html'));
          });
          
          app.listen(PORT, () => {
            console.log(`Static server running on port ${PORT}`);
          });
          EOF
          
          # 🚨 Azure を騙すために .next/standalone ディレクトリ構造を作成
          mkdir -p out/.next/standalone
          
          # メインのserver.jsをstandaloneディレクトリに配置
          cp out/server.js out/.next/standalone/server.js
          
          # 静的ファイルを全てstandaloneにコピー
          cp -r out/* out/.next/standalone/ || true
          
          # expressをstandaloneディレクトリでインストール
          cd out/.next/standalone
          npm init -y
          npm install express@^4.18.0
          cd ../../..
          
          # 現在の内容を確認
          echo "=== EMERGENCY - Out directory contents ==="
          ls -la out/
          echo "=== .next/standalone directory contents ==="
          ls -la out/.next/standalone/
          echo "=== server.js exists in standalone? ==="
          ls -la out/.next/standalone/server.js || echo "SERVER.JS MISSING IN STANDALONE!"
          echo "=== node_modules exists in standalone? ==="
          ls -la out/.next/standalone/node_modules/ || echo "NODE_MODULES MISSING IN STANDALONE!"
          echo "=== Emergency test file exists in standalone? ==="
          ls -la out/.next/standalone/emergency-test.html || echo "MISSING IN STANDALONE!"
          
      - name: Prepare Static Site Package
        run: |
          # out ディレクトリの中身を zip に
          cd out
          zip -r ../release.zip .
          cd - 1>/dev/null
          
          echo "=== Package created ==="
          ls -la release.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: 🚨 EMERGENCY AZURE DEPLOY 🚨
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'aps-junk-01'
          slot-name: 'production'
          package: release.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_8903329C1AAE4120A1D6B4AB2C5031D8 }}
          type: 'zip'
          clean: true
